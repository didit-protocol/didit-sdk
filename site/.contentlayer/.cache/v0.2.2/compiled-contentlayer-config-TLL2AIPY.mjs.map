{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts", "../../../lib/rehype-highlight-code.js", "../../../lib/rehype-highlight-line.js", "../../../lib/rehype-highlight-word.js", "../../../lib/rehype-meta-attribute.js"],
  "sourcesContent": ["/* eslint-disable sort-keys-fix/sort-keys-fix */\nimport { defineDocumentType, makeSource } from 'contentlayer/source-files';\nimport remarkSlug from 'remark-slug';\nimport { rehypeHighlightCode } from './lib/rehype-highlight-code';\nimport { rehypeMetaAttribute } from './lib/rehype-meta-attribute';\n\nexport const Doc = defineDocumentType(() => ({\n  name: 'Doc',\n  filePathPattern: `docs/**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: {\n      type: 'string',\n      required: true,\n    },\n    description: {\n      type: 'string',\n      required: false,\n    },\n  },\n  computedFields: {\n    slug: {\n      type: 'string',\n      resolve: doc => doc._raw.flattenedPath.replace('docs/', ''),\n    },\n  },\n}));\n\nexport default makeSource({\n  contentDirPath: 'data',\n  documentTypes: [Doc],\n  mdx: {\n    remarkPlugins: [remarkSlug],\n    rehypePlugins: [rehypeMetaAttribute, rehypeHighlightCode],\n  },\n});\n", "/* eslint-disable import/order */\n// Inspired by https://github.com/j0lv3r4/mdx-prism\n\nimport parseNumericRange from 'parse-numeric-range';\nimport { visit } from 'unist-util-visit';\nimport { toString as nodeToString } from 'hast-util-to-string';\nimport { refractor } from 'refractor/lib/all.js';\nimport { highlightLine } from './rehype-highlight-line.js';\nimport { highlightWord } from './rehype-highlight-word.js';\n\nexport const rehypeHighlightCode = () => {\n  const visitor = (node, index, parentNode) => {\n    if (parentNode.tagName === 'pre' && node.tagName === 'code') {\n      // syntax highlight\n      const lang = node.properties.className\n        ? node.properties.className[0].split('-')[1]\n        : 'md';\n\n      const registeredLanguages = refractor.listLanguages();\n      if (!registeredLanguages.includes(lang)) return;\n\n      let result = refractor.highlight(nodeToString(node), lang);\n\n      // line highlight\n      const linesToHighlight = parseNumericRange(node.properties.line || '0');\n      result = highlightLine(result, linesToHighlight);\n\n      // word highlight\n      const shouldIgnoreWordHighlight =\n        typeof node.properties.ignoreWordHighlight !== 'undefined';\n      if (!shouldIgnoreWordHighlight) {\n        result = highlightWord(result);\n      }\n\n      node.children = result;\n    }\n  };\n\n  return tree => {\n    visit(tree, 'element', visitor);\n  };\n};\n", "// Inspired by https://github.com/j0lv3r4/mdx-prism\n/* eslint-disable sort-keys-fix/sort-keys-fix */\n\nimport { toHtml as hastToHtml } from 'hast-util-to-html';\nimport parse from 'rehype-parse';\nimport { unified } from 'unified';\n\nconst lineNumberify = (ast, lineNum = 1) => {\n  let lineNumber = lineNum;\n  return ast.reduce(\n    (result, node) => {\n      if (node.type === 'text') {\n        if (node.value.indexOf('\\n') === -1) {\n          node.lineNumber = lineNumber;\n          result.nodes.push(node);\n          return result;\n        }\n\n        const lines = node.value.split('\\n');\n        for (let i = 0; i < lines.length; i++) {\n          if (i !== 0) ++lineNumber;\n          if (i === lines.length - 1 && lines[i].length === 0) continue;\n          result.nodes.push({\n            type: 'text',\n            value: i === lines.length - 1 ? lines[i] : `${lines[i]}\\n`,\n            lineNumber: lineNumber,\n          });\n        }\n\n        result.lineNumber = lineNumber;\n        return result;\n      }\n\n      if (node.children) {\n        node.lineNumber = lineNumber;\n        const processed = lineNumberify(node.children, lineNumber);\n        node.children = processed.nodes;\n        result.lineNumber = processed.lineNumber;\n        result.nodes.push(node);\n        return result;\n      }\n\n      result.nodes.push(node);\n      return result;\n    },\n    { nodes: [], lineNumber: lineNumber }\n  );\n};\n\nconst wrapLines = (ast, linesToHighlight) => {\n  const highlightAll =\n    linesToHighlight.length === 1 && linesToHighlight[0] === 0;\n  const allLines = Array.from(new Set(ast.map(x => x.lineNumber)));\n  let i = 0;\n  const wrapped = allLines.reduce((nodes, marker) => {\n    const line = marker;\n    const children = [];\n    for (; i < ast.length; i++) {\n      if (ast[i].lineNumber < line) {\n        nodes.push(ast[i]);\n        continue;\n      }\n\n      if (ast[i].lineNumber === line) {\n        children.push(ast[i]);\n        continue;\n      }\n\n      if (ast[i].lineNumber > line) {\n        break;\n      }\n    }\n\n    nodes.push({\n      type: 'element',\n      tagName: 'div',\n      properties: {\n        dataLine: line,\n        className: 'highlight-line',\n        dataHighlighted:\n          linesToHighlight.includes(line) || highlightAll ? 'true' : 'false',\n      },\n      children: children,\n      lineNumber: line,\n    });\n\n    return nodes;\n  }, []);\n\n  return wrapped;\n};\n\n// https://github.com/gatsbyjs/gatsby/pull/26161/files\nconst MULTILINE_TOKEN_SPAN =\n  /<span class=\"token ([^\"]+)\">[^<]*\\n[^<]*<\\/span>/g;\n\nconst applyMultilineFix = ast => {\n  // AST to HTML\n  let html = hastToHtml(ast);\n\n  // Fix JSX issue\n  html = html.replace(MULTILINE_TOKEN_SPAN, (match, token) =>\n    match.replace(/\\n/g, `</span>\\n<span class=\"token ${token}\">`)\n  );\n\n  // HTML to AST\n  const hast = unified()\n    .use(parse, { emitParseErrors: true, fragment: true })\n    .parse(html);\n\n  return hast.children;\n};\n\nexport const highlightLine = (ast, lines) => {\n  const formattedAst = applyMultilineFix(ast);\n  const numbered = lineNumberify(formattedAst).nodes;\n\n  return wrapLines(numbered, lines);\n};\n", "/* eslint-disable import/order */\nimport { toHtml as hastToHtml } from 'hast-util-to-html';\nimport { unified } from 'unified';\nimport parse from 'rehype-parse';\n\nconst CALLOUT = /__(.*?)__/g;\n\nexport const highlightWord = code => {\n  const html = hastToHtml(code);\n  const result = html.replace(\n    CALLOUT,\n    (_, text) => `<span class=\"highlight-word\">${text}</span>`\n  );\n  const hast = unified()\n    .use(parse, { emitParseErrors: true, fragment: true })\n    .parse(result);\n  return hast.children;\n};\n", "// https://github.com/wooorm/xdm#syntax-highlighting-with-the-meta-field\n\nimport { visit } from 'unist-util-visit';\n\nvar re = /\\b([-\\w]+)(?:=(?:\"([^\"]*)\"|'([^']*)'|([^\"'\\s]+)))?/g;\n\nexport const rehypeMetaAttribute = () => {\n  return tree => {\n    visit(tree, 'element', visitor);\n  };\n\n  function visitor(node, index, parentNode) {\n    var match;\n\n    if (node.tagName === 'code' && node.data && node.data.meta) {\n      re.lastIndex = 0; // Reset regex.\n\n      while ((match = re.exec(node.data.meta))) {\n        node.properties[match[1]] = match[2] || match[3] || match[4] || '';\n        parentNode.properties[match[1]] =\n          match[2] || match[3] || match[4] || '';\n      }\n    }\n  }\n};\n"],
  "mappings": "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",
  "names": []
}
